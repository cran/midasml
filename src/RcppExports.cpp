// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cvfolds
arma::vec cvfolds(double nfolds, double nrow);
RcppExport SEXP _midasml_cvfolds(SEXP nfoldsSEXP, SEXP nrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< double >::type nrow(nrowSEXP);
    rcpp_result_gen = Rcpp::wrap(cvfolds(nfolds, nrow));
    return rcpp_result_gen;
END_RCPP
}
// getmin_cpp
double getmin_cpp(arma::vec lambda, arma::vec cvm, arma::vec cvsd, int which_lambda);
RcppExport SEXP _midasml_getmin_cpp(SEXP lambdaSEXP, SEXP cvmSEXP, SEXP cvsdSEXP, SEXP which_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cvm(cvmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cvsd(cvsdSEXP);
    Rcpp::traits::input_parameter< int >::type which_lambda(which_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(getmin_cpp(lambda, cvm, cvsd, which_lambda));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sgl_fit
arma::mat cpp_sgl_fit(arma::vec& beta0, arma::mat& Z, arma::mat& X, arma::vec& y, arma::vec& index, arma::vec& lambda1, arma::vec& lambda2, int innerIter, int outerIter, double thresh, double outerThresh, double gamma_solver, double step, int reset);
RcppExport SEXP _midasml_cpp_sgl_fit(SEXP beta0SEXP, SEXP ZSEXP, SEXP XSEXP, SEXP ySEXP, SEXP indexSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP innerIterSEXP, SEXP outerIterSEXP, SEXP threshSEXP, SEXP outerThreshSEXP, SEXP gamma_solverSEXP, SEXP stepSEXP, SEXP resetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< int >::type innerIter(innerIterSEXP);
    Rcpp::traits::input_parameter< int >::type outerIter(outerIterSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< double >::type outerThresh(outerThreshSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_solver(gamma_solverSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type reset(resetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sgl_fit(beta0, Z, X, y, index, lambda1, lambda2, innerIter, outerIter, thresh, outerThresh, gamma_solver, step, reset));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sgl_fitpath
arma::mat cpp_sgl_fitpath(arma::mat& X, arma::mat& Z, arma::vec& y, arma::vec& index, double dummies, arma::vec l1_frac, arma::vec l21_frac, arma::vec dummies_index, arma::vec& lambdas, double gamma_w, int innerIter, int outerIter, double thresh, double outerThresh, double gamma_solver, double step, int reset);
RcppExport SEXP _midasml_cpp_sgl_fitpath(SEXP XSEXP, SEXP ZSEXP, SEXP ySEXP, SEXP indexSEXP, SEXP dummiesSEXP, SEXP l1_fracSEXP, SEXP l21_fracSEXP, SEXP dummies_indexSEXP, SEXP lambdasSEXP, SEXP gamma_wSEXP, SEXP innerIterSEXP, SEXP outerIterSEXP, SEXP threshSEXP, SEXP outerThreshSEXP, SEXP gamma_solverSEXP, SEXP stepSEXP, SEXP resetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< double >::type dummies(dummiesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type l1_frac(l1_fracSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type l21_frac(l21_fracSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dummies_index(dummies_indexSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_w(gamma_wSEXP);
    Rcpp::traits::input_parameter< int >::type innerIter(innerIterSEXP);
    Rcpp::traits::input_parameter< int >::type outerIter(outerIterSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< double >::type outerThresh(outerThreshSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_solver(gamma_solverSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type reset(resetSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sgl_fitpath(X, Z, y, index, dummies, l1_frac, l21_frac, dummies_index, lambdas, gamma_w, innerIter, outerIter, thresh, outerThresh, gamma_solver, step, reset));
    return rcpp_result_gen;
END_RCPP
}
// fastols
arma::vec fastols(const arma::vec& Y, const arma::mat& X, double intercept);
RcppExport SEXP _midasml_fastols(SEXP YSEXP, SEXP XSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(fastols(Y, X, intercept));
    return rcpp_result_gen;
END_RCPP
}
// fastals
arma::vec fastals(const arma::vec& Y, const arma::mat& X, double intercept, double tau, double maxIter, double thresh);
RcppExport SEXP _midasml_fastals(SEXP YSEXP, SEXP XSEXP, SEXP interceptSEXP, SEXP tauSEXP, SEXP maxIterSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(fastals(Y, X, intercept, tau, maxIter, thresh));
    return rcpp_result_gen;
END_RCPP
}
// fastrq
arma::vec fastrq(const arma::vec& Y, const arma::mat& X, double intercept, double tau);
RcppExport SEXP _midasml_fastrq(SEXP YSEXP, SEXP XSEXP, SEXP interceptSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(fastrq(Y, X, intercept, tau));
    return rcpp_result_gen;
END_RCPP
}
// midas_pr
arma::vec midas_pr(const arma::vec& Y, const arma::mat& X, double intercept, double tau, double which_loss, double num_evals);
RcppExport SEXP _midasml_midas_pr(SEXP YSEXP, SEXP XSEXP, SEXP interceptSEXP, SEXP tauSEXP, SEXP which_lossSEXP, SEXP num_evalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type which_loss(which_lossSEXP);
    Rcpp::traits::input_parameter< double >::type num_evals(num_evalsSEXP);
    rcpp_result_gen = Rcpp::wrap(midas_pr(Y, X, intercept, tau, which_loss, num_evals));
    return rcpp_result_gen;
END_RCPP
}
// midasar_pr
arma::vec midasar_pr(const arma::vec& Y, const arma::mat& YLAG, const arma::mat& X, double intercept, double tau, double which_loss, double num_evals);
RcppExport SEXP _midasml_midasar_pr(SEXP YSEXP, SEXP YLAGSEXP, SEXP XSEXP, SEXP interceptSEXP, SEXP tauSEXP, SEXP which_lossSEXP, SEXP num_evalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type YLAG(YLAGSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type which_loss(which_lossSEXP);
    Rcpp::traits::input_parameter< double >::type num_evals(num_evalsSEXP);
    rcpp_result_gen = Rcpp::wrap(midasar_pr(Y, YLAG, X, intercept, tau, which_loss, num_evals));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_midasml_cvfolds", (DL_FUNC) &_midasml_cvfolds, 2},
    {"_midasml_getmin_cpp", (DL_FUNC) &_midasml_getmin_cpp, 4},
    {"_midasml_cpp_sgl_fit", (DL_FUNC) &_midasml_cpp_sgl_fit, 14},
    {"_midasml_cpp_sgl_fitpath", (DL_FUNC) &_midasml_cpp_sgl_fitpath, 17},
    {"_midasml_fastols", (DL_FUNC) &_midasml_fastols, 3},
    {"_midasml_fastals", (DL_FUNC) &_midasml_fastals, 6},
    {"_midasml_fastrq", (DL_FUNC) &_midasml_fastrq, 4},
    {"_midasml_midas_pr", (DL_FUNC) &_midasml_midas_pr, 6},
    {"_midasml_midasar_pr", (DL_FUNC) &_midasml_midasar_pr, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_midasml(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
